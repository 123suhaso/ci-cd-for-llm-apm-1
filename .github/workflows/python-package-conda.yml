name: CI/CD AKS Deployment with Automatic Rollback
on:
  push:
    branches:
      - main

env:
  IMAGE_TAG: ${{ github.sha }}
  KEYVAULT_NAME: kv-scopebot

jobs:
  code-quality-frontend:
    name: Frontend — Syntax & Build Check
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
      - name: Rebuild native modules
        run: npm rebuild || true
      - name: Format (Prettier)
        run: npm run format --if-present || true
      - name: Build syntax check
        run: npm run build --if-present

  code-quality-backend:
    name: Backend — Python Syntax Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      - name: Install dependencies (non-fatal)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -r requirements.txt || true
      - name: Python syntax check
        run: python -m compileall . || true

  security-checks:
    name: Security Checks (Bandit, Safety, ESLint)
    runs-on: ubuntu-latest
    needs: [code-quality-frontend, code-quality-backend]
    steps:
  
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      - name: Install Python deps + tools
        run: |
          cd backend || exit 0
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt || true
          python -m pip install bandit safety || true
          cd ..
      - name: Run Bandit
        run: |
          if [ -d backend ]; then
            cd backend
            bandit -r . -f json -o ../bandit-report.json || true
            cd ..
          fi
      - name: Run Safety
        run: |
          if [ -f backend/requirements.txt ]; then
            safety check -r backend/requirements.txt --json > safety-report.json || true
          fi
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Run ESLint
        run: |
          if [ -d frontend ]; then
            cd frontend
            npm install || true
            npx eslint . --ext .js,.jsx || true
            cd ..
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  backend-tests:
    name: Backend — Run pytest (with coverage)
    runs-on: ubuntu-latest
    needs: [code-quality-backend]
    defaults:
      run:
        working-directory: backend
    env:
      DATABASE_URL: "postgresql://ci:ci@127.0.0.1:5432/ci_db"
      PYTHONPATH: "${{ github.workspace }}/backend"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies (including pytest-cov)
        run: |
          python -m pip install --upgrade pip setuptools wheel
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pytest pytest-asyncio httpx pytest-cov || true

      - name: Run pytest + coverage
        id: pytest
        run: |
          pytest -q --maxfail=1 \
            --junitxml=backend-tests.xml \
            --cov=. \
            --cov-report=term \
            --cov-report=xml:coverage.xml \
            --cov-fail-under=0 || pytest_exit=$?
          if [ -n "${pytest_exit:-}" ]; then
            echo "pytest failed with code ${pytest_exit}"
            exit ${pytest_exit}
          fi

      - name: Upload pytest JUnit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-pytest-report
          path: backend/backend-tests.xml

      - name: Upload coverage xml
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage.xml

  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [security-checks, backend-tests]
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Pre-pull previous cache images (best-effort)
        run: |
          echo "Attempting to pull buildcache and latest for ${SERVICE:=${{ matrix.service }}}"
          docker pull ${{ secrets.DOCKER_USERNAME }}/llm-apm-${{ matrix.service }}:buildcache || true
          docker pull ${{ secrets.DOCKER_USERNAME }}/llm-apm-${{ matrix.service }}:latest || true

      - name: Build & Push Docker image (with registry cache)
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service }}
          file: ${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/llm-apm-${{ matrix.service }}:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/llm-apm-${{ matrix.service }}:latest
          cache-from: |
            type=registry,ref=${{ secrets.DOCKER_USERNAME }}/llm-apm-${{ matrix.service }}:buildcache
            type=registry,ref=${{ secrets.DOCKER_USERNAME }}/llm-apm-${{ matrix.service }}:latest
          cache-to: |
            type=registry,ref=${{ secrets.DOCKER_USERNAME }}/llm-apm-${{ matrix.service }}:buildcache,mode=max
            type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Save buildx cache (optional)
        run: |
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

  deploy:
    name: Deploy to AKS with Auto-Rollback
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
            
      - uses: azure/setup-kubectl@v3
      - uses: azure/setup-helm@v3
      
      - name: Get AKS Credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AKS_RG }} \
            --name ${{ secrets.AKS_CLUSTER }} \
            --overwrite-existing

      - name: Capture current deployment state
        id: capture-state
        run: |
          echo "apturing current deployment state..."
          
          if helm list -n llm-apm | grep -q llm-apm; then
            CURRENT_REVISION=$(helm list -n llm-apm -o json | jq -r '.[] | select(.name=="llm-apm") | .revision')
            echo "current_revision=$CURRENT_REVISION" >> $GITHUB_OUTPUT
            echo "deployment_exists=true" >> $GITHUB_OUTPUT
            echo "Found existing deployment at revision $CURRENT_REVISION"
            
            helm get values llm-apm -n llm-apm > current-values.yaml || true
            kubectl get pods -n llm-apm -o wide > current-pods.txt || true
            
            echo "Current Helm History:"
            helm history llm-apm -n llm-apm
          else
            echo "deployment_exists=false" >> $GITHUB_OUTPUT
            echo "No existing deployment found. This is a fresh install."
          fi

      - name: Deploy Helm chart with automatic rollback
        id: helm-deploy
        run: |
          echo "Starting deployment of version ${{ env.IMAGE_TAG }}..."
          
          set +e
          
          helm upgrade --install llm-apm ./llm-apm-chart \
            --namespace llm-apm \
            --create-namespace \
            --set imageTag=${{ env.IMAGE_TAG }} \
            --set secretsProvider.tenantId=${{ steps.get-azure-info.outputs.tenantId }} \
            --atomic \
            --wait \
            --timeout=10m \
            --cleanup-on-fail \
            2>&1 | tee helm-deploy.log
          
          HELM_EXIT_CODE=${PIPESTATUS[0]}
          
          if [ $HELM_EXIT_CODE -ne 0 ]; then
            echo "Helm deployment failed with exit code $HELM_EXIT_CODE"
            echo "deployment_status=failed" >> $GITHUB_OUTPUT
            cat helm-deploy.log
            exit 1
          else
            echo "Helm deployment succeeded"
            echo "deployment_status=success" >> $GITHUB_OUTPUT
          fi


      - name: Automatic Rollback on Failure
        if: |
          failure() && 
          steps.capture-state.outputs.deployment_exists == 'true' &&
          steps.helm-deploy.outcome == 'failure'

        run: |
          echo "AUTOMATIC ROLLBACK INITIATED"
          echo "================================"
          
          if [ "${{ steps.helm-deploy.outcome }}" = "failure" ]; then
            echo "Reason: Helm deployment failed"
          elif [ "${{ steps.verify-services.outcome }}" = "failure" ]; then
            echo "Reason: Service verification failed"
          elif [ "${{ steps.wait-rollouts.outcome }}" = "failure" ]; then
            echo "Reason: Rollout timeout"
          elif [ "${{ steps.health-checks.outcome }}" = "failure" ]; then
            echo "Reason: Health checks failed"
          elif [ "${{ steps.smoke-tests.outcome }}" = "failure" ]; then
            echo "Reason: Smoke tests failed"
          fi
          
          echo ""
          echo "Rolling back to revision ${{ steps.capture-state.outputs.current_revision }}..."
          
          helm rollback llm-apm ${{ steps.capture-state.outputs.current_revision }} -n llm-apm --wait --timeout=5m
          